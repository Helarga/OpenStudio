From 28f842ae75607d49d9ef102c0c311f868d8f1736 Mon Sep 17 00:00:00 2001
From: "Gerard.Gartside" <Gerard.Gartside@D-Alchemy.com>
Date: Wed, 31 Mar 2021 09:10:02 -0500
Subject: [PATCH 3/3] Added ruby tests for the geometry improvements

---
 ruby/test/ExposedPerimeter_Test.rb            | 178 ++++++++
 ruby/test/Issue_1322_Test.rb                  |  60 +++
 ruby/test/Issue_1683_Test.rb                  |  57 +++
 ruby/test/Issue_2560_Test.rb                  | 168 +++++++
 ruby/test/Issue_3982_Test.rb                  |  75 ++++
 ruby/test/JoinAll_2527_Test.rb                | 135 ++++++
 ruby/test/Perimeter_Test.rb                   | 112 +++++
 ruby/test/Polygon3d_Basic_Angled_Test.rb      |  56 +++
 ruby/test/Polygon3d_Basic_Test.rb             |  65 +++
 ruby/test/Polygon3d_Overlap_Test.rb           | 134 ++++++
 ruby/test/Polygon3d_WithHole_Test.rb          |  61 +++
 .../RemoveSpikes&Overlaps_TZ46_TZ47_Test.rb   | 412 ++++++++++++++++++
 .../Surface_Intersect_ConcaveSurfaces_Test.rb |  80 ++++
 13 files changed, 1593 insertions(+)
 create mode 100644 ruby/test/ExposedPerimeter_Test.rb
 create mode 100644 ruby/test/Issue_1322_Test.rb
 create mode 100644 ruby/test/Issue_1683_Test.rb
 create mode 100644 ruby/test/Issue_2560_Test.rb
 create mode 100644 ruby/test/Issue_3982_Test.rb
 create mode 100644 ruby/test/JoinAll_2527_Test.rb
 create mode 100644 ruby/test/Perimeter_Test.rb
 create mode 100644 ruby/test/Polygon3d_Basic_Angled_Test.rb
 create mode 100644 ruby/test/Polygon3d_Basic_Test.rb
 create mode 100644 ruby/test/Polygon3d_Overlap_Test.rb
 create mode 100644 ruby/test/Polygon3d_WithHole_Test.rb
 create mode 100644 ruby/test/RemoveSpikes&Overlaps_TZ46_TZ47_Test.rb
 create mode 100644 ruby/test/Surface_Intersect_ConcaveSurfaces_Test.rb

diff --git a/ruby/test/ExposedPerimeter_Test.rb b/ruby/test/ExposedPerimeter_Test.rb
new file mode 100644
index 000000000..6e607c07d
--- /dev/null
+++ b/ruby/test/ExposedPerimeter_Test.rb
@@ -0,0 +1,178 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require_relative './lib/model.rb'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class ExposedPerimeter_Test < Minitest::Test
+    def test_ExposedPerimeter
+        puts "initiating Exposed Perimeter Test"
+
+        @osm_name =  "floorplan_school.osm"
+        @osm_dir = "C:/Users/DAuser/Documents/NREL Geometry Analysis/PROTOTYPING/OpenStudio Geometry Analysis Prototypes/zBoost Library Issues/input"
+
+        logFilePath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/ExposedPerimeter.log")
+        file = File.open(logFilePath.to_s, File::WRONLY | File::APPEND | File::CREAT)
+        log = Logger.new(file)
+        log.debug %{
+            Log file created
+            #{Time.now} : #{@osm_name}
+        }
+
+        tol = 1.0E-5
+
+        #load model
+        osm_path = File.join(@osm_dir, @osm_name)
+        puts osm_path
+        log.debug osm_path
+        starting_Time = Time.now
+        puts "Started at : #{starting_Time}"
+        log.debug "Started at : #{starting_Time}"
+        # model = ModelFile.load_model(osm_path)
+        model = ModelFile.load_model_NoTranslator(osm_path)
+        assert(model)
+
+        polygons = Array.new #OpenStudio::Point3dVector.new 
+        spaces = OpenStudio::Model::SpaceVector.new
+        surfaces = OpenStudio::Model::SurfaceVector.new
+
+        # Iterate over spaces, get their surfaces and transform to model coordinates,
+        # find the surfaces with downward facing normal at elevation of 0
+        model.getSpaces.each do |space|
+            spaceTransformation = space.transformation
+            spacename = space.name.get
+            # puts spacename
+            space.surfaces.each do |surface|
+                added = false
+                points = spaceTransformation * surface.vertices
+                normal = OpenStudio::getOutwardNormal(points)
+                if normal
+                    if normal.get.z < 0 
+                        if points[0].z == 0 
+                            polygons.push(points)
+                            spaces.push(space)
+                            if !added
+                                added = true
+                                surfaces.push(surface)
+                            end
+                        end
+                    end
+                end
+            end
+        end
+        assert_equal(spaces.size, 20)
+
+        # Join all those Polygons into one
+        result2 = OpenStudio::joinAllPolygons(polygons,0.01)
+        assert_equal(1, result2.size)
+        assert_equal(12, result2[0].getOuterPath.size)
+        footprint = result2.first
+
+        surfaces.each do |surface|
+            surfname = surface.name.get
+            exposedPerimeter = 0
+            nOverlaps = 0
+            space = surface.space
+            if !space 
+                next
+            end
+            space = space.get
+            spacename = space.name.get
+            spaceTransformation = space.transformation
+            points = spaceTransformation * surface.vertices
+
+            # Find points/edges on the perimeter that points on the surface are coincident with
+            for a in 0..points.size-1 do
+                p1 = points[a]
+                p2 = points[(a+1)%points.size]
+                line = OpenStudio::Point3dVector.new
+                line.push(p1)
+                line.push(p2)
+                overlaps = footprint.overlap(line)
+                overlaps.each do |overlap|
+                    exposedPerimeter += OpenStudio::getDistance(overlap[0], overlap[1])
+                    nOverlaps = nOverlaps + 1
+                end            
+            end
+
+            # Get the space perimeter from the space and compare
+            spacePerimeter = space.exposedPerimeter(footprint)
+            assert_equal(exposedPerimeter, spacePerimeter)
+
+            if spacename == "Artroom 103" 
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(60, exposedPerimeter, 0.01)
+            elsif spacename == "Bathroom 115"
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(32, exposedPerimeter, 0.01)
+            elsif spacename == "Classroom 101" || spacename == "Classroom 105" || spacename == "Classroom 109" || spacename == "Classroom 111"
+                assert_equal(nOverlaps, 2)
+                assert_in_delta(66, exposedPerimeter, 0.01)
+            elsif spacename == "Classroom 102" || spacename == "Lobby 113"
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(62, exposedPerimeter, 0.01)
+            elsif spacename == "Classroom 106" || spacename == "Classroom 108" || spacename == "Classroom 112"
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(122, exposedPerimeter, 0.01)
+            elsif spacename == "Gym 118"
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(54, exposedPerimeter, 0.01)
+            elsif spacename == "Kitchen 119"
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(26, exposedPerimeter, 0.01)
+            elsif spacename == "Mechanical 114"
+                assert_equal(nOverlaps, 0)
+                assert_in_delta(0, exposedPerimeter, 0.01)
+            elsif spacename == "Media Center 116"
+                assert_equal(nOverlaps, 3)
+                assert_in_delta(198, exposedPerimeter, 0.01)
+            elsif spacename == "Offices 117"
+                assert_equal(nOverlaps, 2)
+                assert_in_delta(138, exposedPerimeter, 0.01)
+            elsif spacename == "Corridor 104" || spacename == "Corridor 110"
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(10, exposedPerimeter, 0.01)
+            elsif spacename == "Corridor 107"
+                assert_equal(nOverlaps, 1)
+                assert_in_delta(28, exposedPerimeter, 0.01)
+            elsif spacename == "Cafeteria 120" 
+                assert_equal(nOverlaps, 2)
+                assert_in_delta(118, exposedPerimeter, 0.01)
+            else 
+                # Makes sure we've checked all 20 spaces and got the names right
+                assert(false);
+            end
+        end
+    end
+end
+
diff --git a/ruby/test/Issue_1322_Test.rb b/ruby/test/Issue_1322_Test.rb
new file mode 100644
index 000000000..b0f7ef567
--- /dev/null
+++ b/ruby/test/Issue_1322_Test.rb
@@ -0,0 +1,60 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+require_relative './lib/model.rb'
+require 'logger'
+
+class Issue_1322_Test < Minitest::Test
+    def test_Issue_1322
+        # path1 = OpenStudio::Path.new(File.dirname(__FILE__) + "/7-7 Windows Complete.osm")
+        # path2 = OpenStudio::Path.new(File.dirname(__FILE__) + "/two_stories_pre_intersect")
+        modelPath = OpenStudio::Path.new(File.dirname(__FILE__) + "/input/7-7 Windows Complete.osm")
+
+        # translator = OsVersion::VersionTranslator.new 
+        # model = translator.loadModel(modelPath)
+        model = ModelFile.load_model_NoTranslator(modelPath)
+        assert(model);
+      
+        spaces = model.getSpaces
+        spacesX = OpenStudio::Model::SpaceVector.new
+        spaces.each do |sp|
+            spacesX.push(sp)
+        end
+        OpenStudio::Model::intersectSurfaces(spacesX)
+        OpenStudio::Model::matchSurfaces(spacesX)
+      
+        outpath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/7-7 Windows Complete_after.osm")
+        model.save(outpath, true)
+    end
+end
diff --git a/ruby/test/Issue_1683_Test.rb b/ruby/test/Issue_1683_Test.rb
new file mode 100644
index 000000000..31fa95182
--- /dev/null
+++ b/ruby/test/Issue_1683_Test.rb
@@ -0,0 +1,57 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+require_relative './lib/model.rb'
+require 'logger'
+
+class Issue_1683_Test < Minitest::Test
+    def test_Issue_1683
+        modelPath = OpenStudio::Path.new(File.dirname(__FILE__) + "/input/15023_Model12.osm")
+        # translator = OsVersion::VersionTranslator.new 
+        # model = translator.loadModel(modelPath)
+        model = ModelFile.load_model_NoTranslator(modelPath)
+        assert(model);
+
+        spaces = model.getSpaces
+        spacesX = OpenStudio::Model::SpaceVector.new
+        spaces.each do |sp|
+            spacesX.push(sp)
+        end
+        OpenStudio::Model::intersectSurfaces(spacesX)
+        OpenStudio::Model::matchSurfaces(spacesX)
+
+        outpath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/15023_Model12_after.osm")
+        model.save(outpath, true)
+    end
+end
diff --git a/ruby/test/Issue_2560_Test.rb b/ruby/test/Issue_2560_Test.rb
new file mode 100644
index 000000000..11477717a
--- /dev/null
+++ b/ruby/test/Issue_2560_Test.rb
@@ -0,0 +1,168 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class Issue_2560_Test < Minitest::Test
+    def test_Issue_2560
+        model = OpenStudio::Model::Model.new
+        story2 = OpenStudio::Model::BuildingStory.new(model)
+        
+        perimeter = OpenStudio::Point3dVector.new 
+        perimeter.push(OpenStudio::Point3d.new(4, 2, 3))
+        perimeter.push(OpenStudio::Point3d.new(4, 6, 3))
+        perimeter.push(OpenStudio::Point3d.new(18, 6, 3))
+        perimeter.push(OpenStudio::Point3d.new(18, 2, 3))
+        #OptionalSpace
+        sp1 = OpenStudio::Model::Space::fromFloorPrint(perimeter,3,model)
+        assert(sp1)
+        sp1 = sp1.get
+        sp1.setBuildingStory(story2)
+        tz1 = OpenStudio::Model::ThermalZone.new(model)
+        sp1.setThermalZone(tz1)
+        
+        story1 = OpenStudio::Model::BuildingStory.new(model)
+
+        perimeter.clear()
+        perimeter.push(OpenStudio::Point3d.new(0, 0, 0))
+        perimeter.push(OpenStudio::Point3d.new(0, 3, 0))
+        perimeter.push(OpenStudio::Point3d.new(22, 3, 0))
+        perimeter.push(OpenStudio::Point3d.new(22, 0, 0))
+        #OptionalSpace
+        sp2 = OpenStudio::Model::Space::fromFloorPrint(perimeter,3,model)
+        assert(sp2)
+        sp2 = sp2.get
+        sp2.setBuildingStory(story1)
+        tz2 = OpenStudio::Model::ThermalZone.new(model)
+        sp2.setThermalZone(tz2)
+
+        perimeter.clear()
+        perimeter.push(OpenStudio::Point3d.new(0, 3, 0))
+        perimeter.push(OpenStudio::Point3d.new(0, 5, 0))
+        perimeter.push(OpenStudio::Point3d.new(22, 5, 0))
+        perimeter.push(OpenStudio::Point3d.new(22, 3, 0))
+        #OptionalSpace
+        sp3 = OpenStudio::Model::Space::fromFloorPrint(perimeter,3,model)
+        assert(sp3)
+        sp3 = sp3.get
+        sp3.setBuildingStory(story1)
+        tz3 = OpenStudio::Model::ThermalZone.new(model)
+        sp3.setThermalZone(tz3)
+
+        perimeter.clear()
+        perimeter.push(OpenStudio::Point3d.new(0, 5, 0))
+        perimeter.push(OpenStudio::Point3d.new(0, 8, 0))
+        perimeter.push(OpenStudio::Point3d.new(22, 8, 0))
+        perimeter.push(OpenStudio::Point3d.new(22, 5, 0))
+        #OptionalSpace
+        sp4 = OpenStudio::Model::Space::fromFloorPrint(perimeter,3,model)
+        assert(sp4)
+        sp4 = sp4.get
+        sp4.setBuildingStory(story1)
+        tz4 = OpenStudio::Model::ThermalZone.new(model)
+        sp4.setThermalZone(tz4)
+
+        # Model before intersection
+        outpath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/2560_before.osm")
+        model.save(outpath, true)
+
+        spaces = model.getSpaces
+        #spaces = spaces.get
+        spacesX = OpenStudio::Model::SpaceVector.new
+        spaces.each do |s|
+            spacesX << s
+        end
+
+        OpenStudio::Model::intersectSurfaces(spacesX)
+        OpenStudio::Model::matchSurfaces(spacesX)
+
+        outpath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/2560_after.osm")
+        model.save(outpath, true)
+
+        spacesX.each do |space|
+            spaceName = space.name.get
+            puts spaceName
+            surfaces = space.surfaces
+            surfaces.each do |surface|
+                surfaceName = surface.name.get
+                puts surfaceName
+                vertices = surface.vertices
+            end
+            # puts "End of Space Surfaces"
+            # puts "********************"
+        end
+
+        # Verify that the floor surfaces on space 1 are matched 
+        space1Surfaces = sp1.surfaces;
+        index_surface1 = nil
+        index_surface27 = nil
+        index_surface28 = nil
+        _space1Surface_1 = nil
+        _space1Surface_27 = nil
+        _space1Surface_28 = nil
+        space1Surfaces.each do |space1Surface|
+            # puts "->"
+            if space1Surface.name.get == "Surface 1" 
+                puts space1Surface.name.get
+                _space1Surface_1 = space1Surface
+                assert(_space1Surface_1.adjacentSurface())
+                _adjacentSurface_1 = _space1Surface_1.adjacentSurface()
+                _adjacentSurface_1 = _adjacentSurface_1.get
+                # puts _adjacentSurface.name
+                assert_equal(_adjacentSurface_1.name.get, "Surface 18")
+                #index_surface1 = space1Surfaces.find_index(space1Surface)
+                #puts "Surface 1 Index : #{index_surface1}"
+            end
+            if space1Surface.name.get == "Surface 28"
+                puts space1Surface.name.get
+                _space1Surface_28 = space1Surface
+                assert(_space1Surface_28.adjacentSurface())
+                _adjacentSurface_28 = _space1Surface_28.adjacentSurface()
+                _adjacentSurface_28 = _adjacentSurface_28.get
+                assert_equal(_adjacentSurface_28.name.get, "Surface 24")
+                #index_surface28 = space1Surfaces.find_index(space1Surface)
+                #puts "Surface 28 index : #{index_surface28}"
+            end
+            if space1Surface.name.get == "Surface 27"
+                puts space1Surface.name.get
+                _space1Surface_27 = space1Surface
+                assert(_space1Surface_27.adjacentSurface())
+                _adjacentSurface_27 = _space1Surface_27.adjacentSurface()
+                _adjacentSurface_27 = _adjacentSurface_27.get
+                assert_equal(_adjacentSurface_27.name.get,"Surface 12")
+                #index_surface27 = space1Surfaces.find_index(space1Surface)
+                #puts "Surface 27 index : #{index_surface27}"
+            end
+        end
+    end
+end
\ No newline at end of file
diff --git a/ruby/test/Issue_3982_Test.rb b/ruby/test/Issue_3982_Test.rb
new file mode 100644
index 000000000..4f0bc8e7a
--- /dev/null
+++ b/ruby/test/Issue_3982_Test.rb
@@ -0,0 +1,75 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class Issue_3982_Test < Minitest::Test
+    def test_Issue_3982
+        tol = 0.01
+        model = OpenStudio::Model::Model.new
+        sp1 = OpenStudio::Model::Space.new(model)
+        # Create a rectangular surface and an overlapping triangular surface and intersect them
+        faceVertices = OpenStudio::Point3dVector.new
+        faceVertices.push(OpenStudio::Point3d.new(0, 0, 0))
+        faceVertices.push(OpenStudio::Point3d.new(50, 0, 0))
+        faceVertices.push(OpenStudio::Point3d.new(50, 10, 0))
+        faceVertices.push(OpenStudio::Point3d.new(0, 10, 0))
+        s1 = OpenStudio::Model::Surface.new(faceVertices,model)
+        s1.setParent(sp1)
+
+        sp2 = OpenStudio::Model::Space.new(model)
+        otherFaceVertices = OpenStudio::Point3dVector.new
+        otherFaceVertices.push(OpenStudio::Point3d.new(25, 0, 0))
+        otherFaceVertices.push(OpenStudio::Point3d.new(37.50, 8, 0))
+        otherFaceVertices.push(OpenStudio::Point3d.new(50, 0, 0))
+        s2 = OpenStudio::Model::Surface.new(otherFaceVertices,model)
+        s2.setParent(sp2)
+
+        spaces = OpenStudio::Model::SpaceVector.new
+        spaces.push(sp1)
+        spaces.push(sp2)
+        OpenStudio::Model::intersectSurfaces(spaces)
+
+        space1Surfaces = sp1.surfaces()
+
+        space1Surfaces = space1Surfaces.sort_by {|x| x.vertices.count}
+
+        assert_equal(2, space1Surfaces.size())
+        assert_equal(3, space1Surfaces[0].vertices().size())
+        assert_equal(6, space1Surfaces[1].vertices().size())
+
+        space2Surfaces = sp2.surfaces()
+        assert_equal(1, space2Surfaces.size())
+        assert_equal(3, space2Surfaces[0].vertices().size())
+    end
+end
\ No newline at end of file
diff --git a/ruby/test/JoinAll_2527_Test.rb b/ruby/test/JoinAll_2527_Test.rb
new file mode 100644
index 000000000..d5cca7e30
--- /dev/null
+++ b/ruby/test/JoinAll_2527_Test.rb
@@ -0,0 +1,135 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class JoinAll_2527_Test < Minitest::Test
+    def test_JoinAll_2527
+        tol = 0.01
+
+        polygons = OpenStudio::Point3dVectorVector.new
+        
+        # North
+        poly1 = OpenStudio::Point3dVector.new
+        poly1.push(OpenStudio::Point3d.new(40.869, 30439.131, 0))
+        poly1.push(OpenStudio::Point3d.new(30439.131, 30439.131, 0))
+        poly1.push(OpenStudio::Point3d.new(25867, 25867, 0))
+        poly1.push(OpenStudio::Point3d.new(4612, 25867, 0))
+        # East
+        poly2 = OpenStudio::Point3dVector.new
+        poly2.push(OpenStudio::Point3d.new(30439.131, 30439.131, 0))
+        poly2.push(OpenStudio::Point3d.new(30439.131, 40.869, 0))
+        poly2.push(OpenStudio::Point3d.new(25867, 4612, 0))
+        poly2.push(OpenStudio::Point3d.new(25867, 25867, 0))
+        # West
+        poly3 = OpenStudio::Point3dVector.new
+        poly3.push(OpenStudio::Point3d.new(40.869, 40.869, 0))
+        poly3.push(OpenStudio::Point3d.new(40.869, 30439.131, 0))
+        poly3.push(OpenStudio::Point3d.new(4612, 25867, 0))
+        poly3.push(OpenStudio::Point3d.new(4612, 4612, 0))
+        # Core
+        poly4 = OpenStudio::Point3dVector.new
+        poly4.push(OpenStudio::Point3d.new(25867, 4612, 0))
+        poly4.push(OpenStudio::Point3d.new(4612, 4612, 0))
+        poly4.push(OpenStudio::Point3d.new(4612, 25867, 0))
+        poly4.push(OpenStudio::Point3d.new(25867, 25867, 0))
+        # divide the bottom poly left to right, tri, quad, quad, tri
+        poly5 = OpenStudio::Point3dVector.new
+        poly5.push(OpenStudio::Point3d.new(4612, 4612, 0))
+        poly5.push(OpenStudio::Point3d.new(4612, 40.869, 0))
+        poly5.push(OpenStudio::Point3d.new(40.869, 40.869, 0))
+        poly6 = OpenStudio::Point3dVector.new
+        poly6.push(OpenStudio::Point3d.new(4612, 4612, 0))
+        poly6.push(OpenStudio::Point3d.new(4612, 40.869, 0))
+        poly6.push(OpenStudio::Point3d.new(15219.565, 40.869, 0))
+        poly6.push(OpenStudio::Point3d.new(15219.565, 4612, 0))
+        poly7 = OpenStudio::Point3dVector.new
+        poly7.push(OpenStudio::Point3d.new(15219.565, 4612, 0))
+        poly7.push(OpenStudio::Point3d.new(15219.565, 40.869, 0))
+        poly7.push(OpenStudio::Point3d.new(25867, 40.869, 0))
+        poly7.push(OpenStudio::Point3d.new(25867, 4612, 0))
+        poly8 = OpenStudio::Point3dVector.new
+        poly8.push(OpenStudio::Point3d.new(25867, 4612, 0))
+        poly8.push(OpenStudio::Point3d.new(30439.131, 40.869, 0))
+        poly8.push(OpenStudio::Point3d.new(25867, 40.869, 0))
+
+        polyx = OpenStudio::Point3dVector.new
+        polyx.push(OpenStudio::Point3d.new(30439.131, 40.869, 0))
+        polyx.push(OpenStudio::Point3d.new(40.869, 40.869, 0))
+        polyx.push(OpenStudio::Point3d.new(4612, 4612, 0))
+        polyx.push(OpenStudio::Point3d.new(25867, 4612, 0))
+
+        # puts "polyx size #{polyx.size}"
+
+        polygons.push(poly1)
+        polygons.push(poly2)
+        polygons.push(poly3)
+        polygons.push(poly4)
+        polygons.push(poly5)
+        polygons.push(poly6)
+        polygons.push(poly7)
+        polygons.push(poly8)
+
+
+        joinAllCSVPath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/test_JoinAll_2527_Before.csv")
+            CSV.open(joinAllCSVPath.to_s, "w") do |csv|
+                polygons.each do |poly|
+                    poly.each do |pt|
+                        csv << [pt.x,pt.y,pt.z]
+                    end
+                    csv << []
+                end
+                # ...
+            end
+
+        # We know this fails because join all does not in fact join all
+        test = OpenStudio::joinAll(polygons, tol)
+        assert_equal(3, test.size)
+
+        joinAllCSVPath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/test_JoinAll_2527_Traditional.csv")
+        CSV.open(joinAllCSVPath.to_s, "w") do |csv|
+            test.each do |poly|
+                poly.each do |pt|
+                    csv << [pt.x,pt.y,pt.z]
+                end
+                csv << []
+            end
+            # ...
+        end
+
+        resultPoly = OpenStudio::joinAllPolygons(polygons, tol)
+        # puts "Output of joinAllPolygons' Size is -> #{resultPoly.size}"
+        assert_equal(1, resultPoly.size)
+
+    end
+end
diff --git a/ruby/test/Perimeter_Test.rb b/ruby/test/Perimeter_Test.rb
new file mode 100644
index 000000000..23a5ac9f2
--- /dev/null
+++ b/ruby/test/Perimeter_Test.rb
@@ -0,0 +1,112 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+
+require 'openstudio'
+require_relative './lib/model.rb'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+
+class Perimeter_Test < Minitest::Test
+    def test_Perimeter
+
+        puts "initiating Perimeter Test"
+
+        @osm_name =  "floorplan_school.osm"
+        @osm_dir = "C:/Users/DAuser/Documents/NREL Geometry Analysis/PROTOTYPING/OpenStudio Geometry Analysis Prototypes/zBoost Library Issues/input"
+
+        logFilePath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/Perimeter.log")
+        file = File.open(logFilePath.to_s, File::WRONLY | File::APPEND | File::CREAT)
+        log = Logger.new(file)
+        log.debug %{
+            Log file created
+            #{Time.now} : #{@osm_name}
+        }
+
+        tol = 1.0E-5
+
+        #load model
+        osm_path = File.join(@osm_dir, @osm_name)
+        puts osm_path
+        log.debug osm_path
+        starting_Time = Time.now
+        puts "Started at : #{starting_Time}"
+        log.debug "Started at : #{starting_Time}"
+        # model = ModelFile.load_model(osm_path)
+        model = ModelFile.load_model_NoTranslator(osm_path)
+        assert(model)
+
+        polygons = Array.new #OpenStudio::Point3dVector.new 
+        spaces = OpenStudio::Model::SpaceVector.new
+        spaceNames = Array.new
+        surfaces = OpenStudio::Model::SurfaceVector.new
+
+        model.getSpaces.each do |space|
+            spacename = space.name.get
+            #puts spacename
+            spaceTransformation = space.transformation
+            space.surfaces.each do |surface|
+                surfname = surface.name.get
+                points = spaceTransformation * surface.vertices
+                normal = OpenStudio::getOutwardNormal(points)
+                if normal 
+                    if normal.get.z == -1 
+                        if  points[0].z == 0 
+                            polygons.push(points)
+                            spaces.push(space)
+                            spaceNames.push(spacename)
+                        end
+                    end
+                end
+            end
+        end
+
+        # The traditional method
+        result1 = OpenStudio::joinAll(polygons, 0.01)
+        assert_equal(1, result1.size)
+        assert_equal(12, result1[0].size)
+      
+        # Using polygons
+        result2 = OpenStudio::joinAllPolygons(polygons, 0.01)
+        assert_equal(1, result2.size)
+        assert_equal(12, result2[0].getOuterPath.size)
+
+        # Calculate perimeter
+        footprint = result2[0]
+        perimeter = footprint.perimeter
+        assert_in_delta(1428.0, perimeter, delta = 0.01, msg = nil)
+
+        # # Compare points list to polygon
+        assert(OpenStudio::circularEqual(result1.first, footprint.getOuterPath))
+        
+    end
+end
diff --git a/ruby/test/Polygon3d_Basic_Angled_Test.rb b/ruby/test/Polygon3d_Basic_Angled_Test.rb
new file mode 100644
index 000000000..0d28f3a87
--- /dev/null
+++ b/ruby/test/Polygon3d_Basic_Angled_Test.rb
@@ -0,0 +1,56 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class Polygon3d_Basic_Angled_Test < Minitest::Test
+    def test_Polygon3d_Basic_Angled
+        testPolygon = OpenStudio::Polygon3d.new
+
+        testPolygon.addPoint(OpenStudio::Point3d.new(7.620, 7.620, 1.876))
+        testPolygon.addPoint(OpenStudio::Point3d.new(15.544, 15.544, -0.104))
+        testPolygon.addPoint(OpenStudio::Point3d.new(15.544, 30.784, -0.104))
+        testPolygon.addPoint(OpenStudio::Point3d.new(7.620, 22.860, 1.876))
+
+        assert_in_delta(124.4746, testPolygon.grossArea,0.01)
+
+        normal = testPolygon.outwardNormal
+        assert_in_delta(0.24242, normal.x, 0.001)
+        assert_in_delta(0, normal.y, 0.001)
+        assert_in_delta(0.97017, normal.z, 0.001)
+        assert_in_delta(1, normal.length, 0.001)
+      
+        perimeter = testPolygon.perimeter()
+        assert_in_delta(53.2396,perimeter, 0.001)
+    end
+end
diff --git a/ruby/test/Polygon3d_Basic_Test.rb b/ruby/test/Polygon3d_Basic_Test.rb
new file mode 100644
index 000000000..193d14501
--- /dev/null
+++ b/ruby/test/Polygon3d_Basic_Test.rb
@@ -0,0 +1,65 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class Polygon3d_Basic_Test < Minitest::Test
+    def test_Polygon3d_Basic
+        testPolygon = OpenStudio::Polygon3d.new
+
+        testPolygon.addPoint(OpenStudio::Point3d.new(0, 0, 0))
+        testPolygon.addPoint(OpenStudio::Point3d.new(100, 0, 0))
+        testPolygon.addPoint(OpenStudio::Point3d.new(100, 100, 0))
+        testPolygon.addPoint(OpenStudio::Point3d.new(0, 100, 0))
+
+        normal = testPolygon.outwardNormal
+        perimeter = testPolygon.perimeter
+        assert_in_delta(400, perimeter, 1)
+
+        grossArea = testPolygon.grossArea
+        assert_in_delta(10000, grossArea, 1)
+
+        netArea = testPolygon.netArea
+        assert_equal(grossArea, netArea)
+
+        # notrmal shoudl eb the same as it would be calling the static method
+        normal1 = OpenStudio::getOutwardNormal(testPolygon.getOuterPath())
+        assert_equal(normal.x, normal1.get.x)
+        assert_equal(normal.y, normal1.get.y)
+        assert_equal(normal.z, normal1.get.z)
+
+        # Check area
+        assert_equal(grossArea, OpenStudio::getArea(testPolygon.getOuterPath).get)
+
+    end
+end
diff --git a/ruby/test/Polygon3d_Overlap_Test.rb b/ruby/test/Polygon3d_Overlap_Test.rb
new file mode 100644
index 000000000..6d55d191d
--- /dev/null
+++ b/ruby/test/Polygon3d_Overlap_Test.rb
@@ -0,0 +1,134 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require_relative './lib/model.rb'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class Polygon3d_Overlap_Test < Minitest::Test
+    def test_Polygon3d_Overlap
+        p = OpenStudio::Polygon3d.new 
+        p.addPoint(OpenStudio::Point3d.new(0, 0, 0))
+        p.addPoint(OpenStudio::Point3d.new(0, 70, 0))
+        p.addPoint(OpenStudio::Point3d.new(158, 70, 0))
+        p.addPoint(OpenStudio::Point3d.new(158, 98, 0))
+        p.addPoint(OpenStudio::Point3d.new(0, 98, 0))
+        p.addPoint(OpenStudio::Point3d.new(0, 168, 0))
+        p.addPoint(OpenStudio::Point3d.new(158, 168, 0))
+        p.addPoint(OpenStudio::Point3d.new(158, 268, 0))
+        p.addPoint(OpenStudio::Point3d.new(220, 268, 0))
+        p.addPoint(OpenStudio::Point3d.new(220, 200, 0))
+        p.addPoint(OpenStudio::Point3d.new(288, 200, 0))
+        p.addPoint(OpenStudio::Point3d.new(288, 0, 0))
+
+        # NOTE: LINE is the line being tested to overlap and EDGE on the polygon
+        # 1 - line/edge start and end points are the same
+
+        line = OpenStudio::Point3dVector.new
+        line.push(OpenStudio::Point3d.new(158,98,0))
+        line.push(OpenStudio::Point3d.new(0,98,0))
+        #overlap = OpenStudio::Point3dVectorVector.new
+        overlap = p.overlap(line)
+        assert(overlap.size == 1)
+        assert(OpenStudio::getDistance(overlap[0][0], OpenStudio::Point3d.new(158, 98, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[0][1], OpenStudio::Point3d.new(0, 98, 0)) < 0.1)
+
+        
+        # 2 - line/edge partial overlap from the start (line.sp, edge.sp, line.ep, edge.ep)
+        line.clear()
+        line.push(OpenStudio::Point3d.new(200, 200, 0))
+        line.push(OpenStudio::Point3d.new(250, 200, 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 1)
+        assert(OpenStudio::getDistance(overlap[0][0], OpenStudio::Point3d.new(220, 200, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[0][1], OpenStudio::Point3d.new(250, 200, 0)) < 0.1)
+
+        # 3 - line/edge partially overlap past the end (edge.sp, line.sp, edge.ep, line.ep)
+        line.clear();
+        line.push(OpenStudio::Point3d.new(288, 125, 0))
+        line.push(OpenStudio::Point3d.new(288, -25 , 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 1)
+        assert(OpenStudio::getDistance(overlap[0][0], OpenStudio::Point3d.new(288, 125, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[0][1], OpenStudio::Point3d.new(288, 0, 0)) < 0.1)
+
+        # 4 - edge is fully enclosed in line
+        line.clear()
+        line.push(OpenStudio::Point3d.new(150, 268, 0))
+        line.push(OpenStudio::Point3d.new(250, 268, 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 1)
+        assert(OpenStudio::getDistance(overlap[0][0], OpenStudio::Point3d.new(158, 268, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[0][1], OpenStudio::Point3d.new(220, 268, 0)) < 0.1)
+
+        # 5 - line is fully enclosed in edge
+        line.clear()
+        line.push(OpenStudio::Point3d.new(50, 168, 0))
+        line.push(OpenStudio::Point3d.new(100, 168, 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 1)
+        assert(OpenStudio::getDistance(overlap[0][0], OpenStudio::Point3d.new(50, 168, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[0][1], OpenStudio::Point3d.new(100, 168, 0)) < 0.1)
+
+        # 6 - Line overlaps two edges
+        line.clear()
+        line.push(OpenStudio::Point3d.new(158, 25, 0))
+        line.push(OpenStudio::Point3d.new(158, 275, 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 2)
+        assert(OpenStudio::getDistance(overlap[0][0], OpenStudio::Point3d.new(158, 70, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[0][1], OpenStudio::Point3d.new(158, 98, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[1][0], OpenStudio::Point3d.new(158, 168, 0)) < 0.1)
+        assert(OpenStudio::getDistance(overlap[1][1], OpenStudio::Point3d.new(158, 268, 0)) < 0.1)
+
+        # 7 - No overlap
+        line.clear()
+        line.push(OpenStudio::Point3d.new(50, 50, 0))
+        line.push(OpenStudio::Point3d.new(250, 50, 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 0)
+
+        # 8 - No overlap
+        line.clear()
+        line.push(OpenStudio::Point3d.new(50, 50, 0))
+        line.push(OpenStudio::Point3d.new(250, 250, 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 0)
+
+        # 9 - No overlap (External corner to 90 deg on external edge)
+        line.clear();
+        line.push(OpenStudio::Point3d.new(158, 168, 0))
+        line.push(OpenStudio::Point3d.new(220, 160, 0))
+        overlap = p.overlap(line)
+        assert(overlap.size() == 0)
+    end
+end
\ No newline at end of file
diff --git a/ruby/test/Polygon3d_WithHole_Test.rb b/ruby/test/Polygon3d_WithHole_Test.rb
new file mode 100644
index 000000000..d82bb5328
--- /dev/null
+++ b/ruby/test/Polygon3d_WithHole_Test.rb
@@ -0,0 +1,61 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class Polygon3d_WithHole_Test < Minitest::Test
+    def test_Polygon3d_WithHole
+        testPolygon = OpenStudio::Polygon3d.new
+        testPolygon.addPoint(OpenStudio::Point3d.new(0, 0, 0))
+        testPolygon.addPoint(OpenStudio::Point3d.new(100, 0, 0))
+        testPolygon.addPoint(OpenStudio::Point3d.new(100, 100, 0))
+        testPolygon.addPoint(OpenStudio::Point3d.new(0, 100, 0))
+
+        hole = OpenStudio::Point3dVector.new
+        hole.push(OpenStudio::Point3d.new(30, 30, 0))
+        hole.push(OpenStudio::Point3d.new(30, 70, 0))
+        hole.push(OpenStudio::Point3d.new(70, 70, 0))
+        hole.push(OpenStudio::Point3d.new(70, 30, 0))
+
+        testPolygon.addHole(hole)
+        perimeter = testPolygon.perimeter
+        assert_in_delta(400,perimeter,1)
+
+        grossArea = testPolygon.grossArea
+        assert_in_delta(10000,grossArea,1)
+
+        netArea = testPolygon.netArea
+        #assert_in_delta(grossArea,netArea)
+        assert_equal(netArea,8400)
+    end
+end
diff --git a/ruby/test/RemoveSpikes&Overlaps_TZ46_TZ47_Test.rb b/ruby/test/RemoveSpikes&Overlaps_TZ46_TZ47_Test.rb
new file mode 100644
index 000000000..c840c2365
--- /dev/null
+++ b/ruby/test/RemoveSpikes&Overlaps_TZ46_TZ47_Test.rb
@@ -0,0 +1,412 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class SurfMatch_TolFix_Test < Minitest::Test
+    def test_SurfMatch_TolFix
+        @osm_name = "removeSpikes&Overlaps_TZ46_TZ47.osm"
+        @osm_dir = "C:/Users/DAuser/Documents/NREL Geometry Analysis/PROTOTYPING/OpenStudio Geometry Analysis Prototypes/zBoost Library Issues/input"
+
+        logFilePath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/removeSpikes&Overlaps_TZ46_TZ47.log")
+        file = File.open(logFilePath.to_s, File::WRONLY | File::APPEND | File::CREAT)
+        log = Logger.new(file)
+        log.debug %{
+            Log file created
+            #{Time.now} : #{@osm_name}
+        }
+        model = OpenStudio::Model::Model.new
+        space = OpenStudio::Model::Space.new(model)
+        assert(space.name)
+        puts space.name
+        assert_equal("Space 1", space.name.get); #TZ46-81
+
+        #module AMod # you can put the module into a file, too
+        #points = Array.new
+        points = OpenStudio::Point3dVector.new
+        points.push(OpenStudio::Point3d.new(0.787401574803132, 3.14960629921254, 3.84078906495842e-15));
+        points.push(OpenStudio::Point3d.new(2.75590551181098, 1.18110236220469, 7.70979364755774e-15));
+        points.push(OpenStudio::Point3d.new(2.00599925009369, 0.356205474315723, 3.76899861514623e-15));
+        points.push(OpenStudio::Point3d.new(0, 2.36220472440939, 0));
+    
+        surface1 = OpenStudio::Model::Surface.new(points,model)
+        surface1.setParent(space)
+
+        points.clear
+
+        points.push(OpenStudio::Point3d.new(1.37795275590549, 0.984251968503903, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(5.31496062992121, 4.92125984251968, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(3.93700787401569, 6.2992125984252, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(0, 2.36220472440939, 3.51739188744401));
+
+        surface2 = OpenStudio::Model::Surface.new(points,model)
+        surface2.setParent(space)
+
+        points.clear
+        points.push(OpenStudio::Point3d.new(5.11811023622049, 2.75590551181099, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(5.11811023622049, 2.75590551181099, 0));
+        points.push(OpenStudio::Point3d.new(6.2992125984252, 3.93700787401571, 0));
+        points.push(OpenStudio::Point3d.new(6.2992125984252, 3.93700787401571, 3.51739188744401));
+
+        surface3 = OpenStudio::Model::Surface.new(points,model)
+        surface3.setParent(space)
+
+        points.clear
+        points.push(OpenStudio::Point3d.new(2.36220472440939, 0, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(2.36220472440939, 0, 0));
+        points.push(OpenStudio::Point3d.new(5.11811023622049, 2.75590551181099, 0));
+        points.push(OpenStudio::Point3d.new(5.11811023622049, 2.75590551181099, 3.51739188744401));
+
+        surface4 = OpenStudio::Model::Surface.new(points,model)
+        surface4.setParent(space)
+
+        points.clear
+        points.push(OpenStudio::Point3d.new(0, 2.36220472440939, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(0, 2.36220472440939, 0));
+        points.push(OpenStudio::Point3d.new(2.36220472440939, 0, 0));
+        points.push(OpenStudio::Point3d.new(2.36220472440939, 0, 3.51739188744401));
+
+        surface5 = OpenStudio::Model::Surface.new(points,model)
+        surface5.setParent(space)
+
+        points.clear
+        points.push(OpenStudio::Point3d.new(3.93700787401569, 6.2992125984252, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(3.93700787401569, 6.2992125984252, 0));
+        points.push(OpenStudio::Point3d.new(0, 2.36220472440939, 0));
+        points.push(OpenStudio::Point3d.new(0, 2.36220472440939, 3.51739188744401));
+
+        surface6 = OpenStudio::Model::Surface.new(points,model)
+        surface6.setParent(space)
+
+        points.clear
+        points.push(OpenStudio::Point3d.new(6.2992125984252, 3.93700787401571, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(6.2992125984252, 3.93700787401571, 0));
+        points.push(OpenStudio::Point3d.new(3.93700787401569, 6.2992125984252, 0));
+        points.push(OpenStudio::Point3d.new(3.93700787401569, 6.2992125984252, 3.51739188744401));
+
+        surface7 = OpenStudio::Model::Surface.new(points,model)
+        surface7.setParent(space)
+
+        points.clear
+        points.push(OpenStudio::Point3d.new(2.3622047244094, -1.44382283906452e-15, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(6.2992125984252, 3.93700787401571, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(5.31496062992121, 4.92125984251968, 3.51739188744401));
+        points.push(OpenStudio::Point3d.new(1.37795275590549, 0.984251968503901, 3.51739188744401));
+
+        surface8= OpenStudio::Model::Surface.new(points,model)
+        surface8.setParent(space)
+
+        points.clear
+        points.push(OpenStudio::Point3d.new(3.93700787401569, 6.2992125984252, 0));
+        points.push(OpenStudio::Point3d.new(6.2992125984252, 3.93700787401571, 0));
+        points.push(OpenStudio::Point3d.new(2.3622047244094, -2.88764567812905e-15, 0));
+        points.push(OpenStudio::Point3d.new(2.00599925009369, 0.356205474315719, 4.33146851719357e-15));
+        points.push(OpenStudio::Point3d.new(2.75590551181099, 1.18110236220469, 7.21911419532262e-15));
+        points.push(OpenStudio::Point3d.new(0.787401574803138, 3.14960629921254, 4.33146851719357e-15));
+
+        surface9 = OpenStudio::Model::Surface.new(points,model)
+        surface9.setParent(space)
+
+        space2 = OpenStudio::Model::Space.new(model)
+        assert(space2.name)
+        puts space2.name
+        assert_equal("Space 2", space2.name.get)  #TZ47-91
+      
+        points.clear
+        points.push(OpenStudio::Point3d.new(7.0866141732284, 9.44881889763781, 0))
+        points.push(OpenStudio::Point3d.new(8.16034359341449, 8.55404438081602, -1.44382283906452e-15))
+        points.push(OpenStudio::Point3d.new(5.90551181102359, 6.2992125984252, -1.44382283906452e-15))
+        points.push(OpenStudio::Point3d.new(4.92125984251972, 7.28346456692913, -7.21911419532262e-16))
+      
+        surface10 = OpenStudio::Model::Surface.new(points,model)
+        surface10.setParent(space2)
+      
+        points.clear
+        points.push(OpenStudio::Point3d.new(1.96850393700789, -2.88764567812905e-15, 6.095999804928))
+        points.push(OpenStudio::Point3d.new(9.44881889763779, 7.4803149606299, 6.095999804928))
+        points.push(OpenStudio::Point3d.new(7.0866141732284, 9.44881889763781, 6.095999804928))
+        points.push(OpenStudio::Point3d.new(-5.77529135625809e-15, 2.3622047244094, 6.095999804928))
+      
+        surface11 = OpenStudio::Model::Surface.new(points,model)
+        surface11.setParent(space2)
+      
+        points.clear
+        points.push(OpenStudio::Point3d.new(7.0866141732284, 9.44881889763781, 6.095999804928))
+        points.push(OpenStudio::Point3d.new(7.0866141732284, 9.44881889763781, 0))
+        points.push(OpenStudio::Point3d.new(-5.77529135625809e-15, 2.3622047244094, 0))
+        points.push(OpenStudio::Point3d.new(-5.77529135625809e-15, 2.3622047244094, 6.095999804928))
+      
+        surface12 = OpenStudio::Model::Surface.new(points,model)
+        surface12.setParent(space2)
+      
+        points.clear
+        points.push(OpenStudio::Point3d.new(9.44881889763779, 7.4803149606299, 6.095999804928))
+        points.push(OpenStudio::Point3d.new(9.44881889763779, 7.4803149606299, 0))
+        points.push(OpenStudio::Point3d.new(7.0866141732284, 9.44881889763781, 0))
+        points.push(OpenStudio::Point3d.new(7.0866141732284, 9.44881889763781, 6.095999804928))
+      
+        surface13 = OpenStudio::Model::Surface.new(points,model)
+        surface13.setParent(space2)
+      
+        points.clear
+        points.push(OpenStudio::Point3d.new(1.96850393700789, -2.88764567812905e-15, 6.095999804928))
+        points.push(OpenStudio::Point3d.new(1.96850393700789, -2.88764567812905e-15, 0))
+        points.push(OpenStudio::Point3d.new(9.44881889763779, 7.4803149606299, 0))
+        points.push(OpenStudio::Point3d.new(9.44881889763779, 7.4803149606299, 6.095999804928))
+        
+        surface14 = OpenStudio::Model::Surface.new(points,model)
+        surface14.setParent(space2)
+      
+        points.clear
+        points.push(OpenStudio::Point3d.new(-5.77529135625809e-15, 2.3622047244094, 6.095999804928))
+        points.push(OpenStudio::Point3d.new(-5.77529135625809e-15, 2.3622047244094, 0))
+        points.push(OpenStudio::Point3d.new(1.96850393700789, -2.88764567812905e-15, 0))
+        points.push(OpenStudio::Point3d.new(1.96850393700789, -2.88764567812905e-15, 6.095999804928))
+      
+        surface15 = OpenStudio::Model::Surface.new(points,model)
+        surface15.setParent(space2)
+      
+        points.clear
+        points.push(OpenStudio::Point3d.new(8.16034359341449, 8.55404438081602, -1.44382283906452e-15))
+        points.push(OpenStudio::Point3d.new(9.44881889763779, 7.4803149606299, 0))
+        points.push(OpenStudio::Point3d.new(1.96850393700789, -2.88764567812905e-15, 0))
+        points.push(OpenStudio::Point3d.new(-5.77529135625809e-15, 2.3622047244094, 0))
+        points.push(OpenStudio::Point3d.new(4.92125984251972, 7.28346456692913, -7.21911419532262e-16))
+        points.push(OpenStudio::Point3d.new(5.90551181102359, 6.2992125984252, -1.44382283906452e-15))
+      
+        surface16 = OpenStudio::Model::Surface.new(points,model)
+        surface16.setParent(space2)
+
+        assert_equal(2, model.getSpaces.size)
+        assert_equal(16, model.getSurfaces.size)
+        assert(true)
+        _vector1 = OpenStudio::Vector3d.new(-34.6329065993854, 2.80342559613037, -9.61339169237201)
+        _vector2 = OpenStudio::Vector3d.new(0,0,1)
+        _radVal_relativeToNorth = -OpenStudio::degToRad(24.5)
+        _rotation = OpenStudio::Transformation::rotation(_vector2,_radVal_relativeToNorth)
+        #_transformation = OpenStudio::Transformation::translation()
+
+        space.setXOrigin(-34.6329065993854)
+        space.setYOrigin(2.80342559613037)
+        space.setZOrigin(-9.61339169237201)
+        space.setDirectionofRelativeNorth(24.5)
+        assert(space.transformation)
+        assert_equal(-34.6329065993854, space.xOrigin)
+        assert_equal(2.80342559613037, space.yOrigin)
+        assert_equal(-9.61339169237201, space.zOrigin)
+        assert_equal(24.5, space.directionofRelativeNorth)
+        #assert(space.setTransformation(OpenStudio::Transformation::translation(OpenStudio::Vector3d.new(-34.6329065993854, 2.80342559613037, -9.61339169237201))* OpenStudio::Transformation::rotation(OpenStudio::Vector3d.new(0, 0, 1), -OpenStudio::degToRad(24.5))))
+
+        space2.setXOrigin(-40.4694197176487)
+        space2.setYOrigin(-1.45922839997927)
+        space2.setZOrigin(-6.095999804928)
+        space2.setDirectionofRelativeNorth(24.5)
+        assert(space2.transformation)
+        assert_equal(-40.4694197176487, space2.xOrigin)
+        assert_equal(-1.45922839997927, space2.yOrigin)
+        assert_equal(-6.095999804928, space2.zOrigin)
+        assert_equal(24.5, space2.directionofRelativeNorth)
+        # assert(space2.setTransformation(OpenStudio::Transformation::translation(OpenStudio::Vector3d.new(-40.4694197176487, -1.45922839997927, -6.095999804928)) * OpenStudio::Transformation::rotation(OpenStudio::Vector3d.new(0, 0, 1), -OpenStudio::degToRad(24.5))));
+
+        spaces = model.getSpaces;
+        blacklist = OpenStudio::Model::SpaceVector.new
+
+        nSurfaces = 0
+        spaces.each do |space|
+            nSurfaces += space.surfaces.size
+        end
+
+        puts "The Model has total #{spaces.size} spaces & #{nSurfaces} surfaces"
+        log.debug "The Model has total #{spaces.size} spaces & #{nSurfaces} surfaces"
+
+        tol = 1.0E-5
+        plane_equal_count = 0
+        inside_intersection_count = 0
+        i_sum =0
+        j_sum = 0
+        model.getSpaces.each do |space|
+            #spaces_filtered<<space
+            name = space.name.get
+            #puts "Space : #{name}"
+            log.debug "Space : #{name}"
+            spaceTransformation = space.transformation
+            #puts "Trnsformation : #{spaceTransformation}"
+            log.debug "Trnsformation : #{spaceTransformation}"
+
+            surfaces = space.surfaces
+            if name == "Space TZ46-3"
+                hello = 1  #not required
+                #puts "-------------------------------------------------------------------------------------------------------> Hello"
+            end
+
+            for i in 0..space.surfaces.size-1
+                i_sum+=1
+                thisSurface =  surfaces[i]
+                thisName = thisSurface.name
+                #puts "Surface Name : #{thisName}"
+                log.debug "Surface Name : #{thisName}"
+                for j in i+1..surfaces.size-1
+                    j_sum+=1
+                    otherSurface = surfaces[j]
+                    otherName = otherSurface.name.get
+                    #puts "Other Surface : #{otherSurface} & Name : #{otherName}"
+                    log.debug "Other Surface : #{otherSurface} & Name : #{otherName}"
+
+                    plane = spaceTransformation * thisSurface.plane
+                    #puts "Plane : #{plane}"
+                    log.debug "Plane : #{plane}"
+
+                    otherPlane = spaceTransformation * otherSurface.plane
+                    #puts "Plane : #{otherPlane}"
+                    log.debug "Plane : #{otherPlane}"
+
+                    if plane.equal(otherPlane)
+                        plane_equal_count+=1
+                        #puts "------------------------------------------------------------------------------------------------------------------------------------------> INSIDE PLANE AND OTHER PLANE COMPARISON TEST"
+                        log.debug "------------------------------------------------------------------------------------------------------------------------------------------> INSIDE PLANE AND OTHER PLANE COMPARISON TEST"
+
+                        thisVertices = spaceTransformation * thisSurface.vertices
+                        #puts "This Vertices : #{thisVertices}"
+                        log.debug "This Vertices : #{thisVertices}"
+
+                        otherVertices = spaceTransformation * otherSurface.vertices
+                        #puts "Other Vertices : #{otherVertices}"
+                        log.debug "Other Vertices : #{otherVertices}"
+
+                        faceTransformation = OpenStudio::Transformation::alignFace(thisVertices)
+                        #puts "faceTransformation : #{faceTransformation}"
+                        log.debug "faceTransformation : #{faceTransformation}"
+
+                        faceTransformationInverse = faceTransformation.inverse
+                        faceVertices = faceTransformationInverse * thisVertices
+                        otherFaceVertices = faceTransformationInverse * otherVertices
+
+                        outwardNormal = OpenStudio::getOutwardNormal(faceVertices)
+                        #puts "Outward Normal : #{outwardNormal.get.z}"
+                        log.debug "Outward Normal : #{outwardNormal.get.z}"
+
+                        faceVertices_R = Array.new
+                        if outwardNormal.get.z > -1 + tol
+                            faceVertices_R = faceVertices.reverse()
+                            # HAVE TO SAVE IT INTO DIFFERENT VARIABLE
+                            # TO PASS IT INTO INTERSECT
+                            # or Make .reverse!() working | failing as Frozen
+                        end
+
+                        otherOutwardNormal = OpenStudio::getOutwardNormal(otherFaceVertices)
+                        #puts "Other Outward Normal : #{otherOutwardNormal.get.z}"
+                        log.debug "Other Outward Normal : #{otherOutwardNormal.get.z}"
+
+                        otherFaceVertices_R = Array.new
+                        if otherOutwardNormal.get.z > -1 + tol
+                            otherFaceVertices_R = otherFaceVertices.reverse()
+                            # HAVE TO SAVE IT INTO DIFFERENT VARIABLE
+                            # TO PASS IT INTO INTERSECT
+                            # or Make .reverse!() working | failing as Frozen
+                        end
+
+                        intersection = OpenStudio::intersect(faceVertices_R, otherFaceVertices_R, tol)
+                        # if  intersection => all result
+                        # if !intersection => o result 
+                        # if intersection.nil?
+                        if not intersection.empty?
+                            inside_intersection_count+=1
+                            puts "Space #{name} has surfaces that intersect with each other, namely  #{thisName} and #{otherName}"
+                            log.debug  "Space #{name} has surfaces that intersect with each other, namely  #{thisName} and #{otherName}"
+                            #blacklist.push(space)
+                            blacklist << space
+                        end
+                    elsif
+                        puts "------------------------------------------------------------------------------------------------------------------------------------------> OUTSIDE PLANE AND OTHER PLANE COMPARISON TEST"
+                        log.debug "------------------------------------------------------------------------------------------------------------------------------------------> OUTSIDE PLANE AND OTHER PLANE COMPARISON TEST"
+                    end
+
+                end
+            end
+
+        end
+
+        puts ""
+        # puts "Plane equal count(280 as per c++) = #{plane_equal_count} in ruby"
+        # puts "Insdie Intersect Count (11 as per c++) = #{inside_intersection_count} in ruby"
+        # puts "I sum (986 as per c++) : #{i_sum}"
+        # puts "J sum (7345 as per c++) : #{j_sum}"
+        puts Time.now
+        puts "All Spaces Count : #{spaces.size}"
+        puts "Black List Spaces Count : #{blacklist.uniq.size}"
+
+                
+        spaces_filtered = spaces.dup
+        puts "The initial filtered Spaces Count : #{spaces_filtered.size}"
+        blacklist.each do |sp|
+            #model.getSpaces.delete(sp) #Frozen array error
+            #spaces.delete(sp)  # Frozen array error
+            spaces_filtered.delete(sp) # working but mis-match 662 to 666
+        end
+        puts "The final filtered Spaces Count : #{spaces_filtered.size}"
+
+
+        # put all of the spaces in the model into a vector
+        spacesF = OpenStudio::Model::SpaceVector.new
+        spaces_filtered.each do |space|
+        spacesF << space
+        end
+
+
+
+        initialMatchedSurfaceCounter = 0
+        spacesF.each do |sp|
+            sp.surfaces.each do |surface|
+                if surface.outsideBoundaryCondition == 'Surface'
+                    next if !surface.adjacentSurface.is_initialized # don't count as matched if boundary condition is right but no matched object
+                    initialMatchedSurfaceCounter += 1
+                end
+            end
+        end
+
+        # Don't sort by area, use the shrink and expand to remove spikes
+        OpenStudio::Model::intersectSurfaces(spacesF)#,false,true)
+        OpenStudio::Model::matchSurfaces(spacesF)
+
+        outpath = OpenStudio::Path.new(File.dirname(__FILE__) + "/output/"+@osm_name)
+        model.save(outpath, true);
+        #end
+
+
+
+        #include AMod
+    end
+end
+#model = OpenStudio::Model::Model.new
+#space = Openstudio::Model::Space::Space(model)	
+
diff --git a/ruby/test/Surface_Intersect_ConcaveSurfaces_Test.rb b/ruby/test/Surface_Intersect_ConcaveSurfaces_Test.rb
new file mode 100644
index 000000000..60db1f99d
--- /dev/null
+++ b/ruby/test/Surface_Intersect_ConcaveSurfaces_Test.rb
@@ -0,0 +1,80 @@
+########################################################################################################################
+#  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
+#  following conditions are met:
+#
+#  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
+#  disclaimer.
+#
+#  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
+#  disclaimer in the documentation and/or other materials provided with the distribution.
+#
+#  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
+#  derived from this software without specific prior written permission from the respective party.
+#
+#  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
+#  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
+#  written permission from Alliance for Sustainable Energy, LLC.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
+#  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+########################################################################################################################
+
+require 'openstudio'
+require 'logger'
+require 'openstudio/measure/ShowRunnerOutput'
+require 'fileutils'
+require 'minitest/autorun'
+require 'csv'
+
+class Surface_Intersect_ConcaveSurfaces_Test < Minitest::Test
+    def test_Surface_Intersect_ConcaveSurfaces
+        model = OpenStudio::Model::Model.new
+        sp1 = OpenStudio::Model::Space.new(model)
+
+        z = 1
+
+        top = OpenStudio::Point3dVector.new
+        top.push(OpenStudio::Point3d.new(3, 0, z))
+        top.push(OpenStudio::Point3d.new(3, 5, z))
+        top.push(OpenStudio::Point3d.new(7, 5, z))
+        top.push(OpenStudio::Point3d.new(7, 0, z))
+        normTop = OpenStudio::getOutwardNormal(top)
+        assert_in_delta(-1, normTop.get.z, delta = 0.01, msg = nil)
+        s1 = OpenStudio::Model::Surface.new(top, model)
+        s1.setParent(sp1)
+
+        sp2 = OpenStudio::Model::Space.new(model)
+        bottom = OpenStudio::Point3dVector.new
+        bottom.push(OpenStudio::Point3d.new(0, 0, z))
+        bottom.push(OpenStudio::Point3d.new(10, 0, z))
+        bottom.push(OpenStudio::Point3d.new(10, 10, z))
+        bottom.push(OpenStudio::Point3d.new(0, 10, z))
+        normBottom = OpenStudio::getOutwardNormal(bottom)
+        assert_in_delta(1, normBottom.get.z, delta = 0.01, msg= nil)
+        s2 = OpenStudio::Model::Surface.new(bottom, model)
+        s2.setParent(sp2)
+
+        spaces = OpenStudio::Model::SpaceVector.new
+        spaces.push(sp1)
+        spaces.push(sp2)
+        OpenStudio::Model::intersectSurfaces(spaces)
+        OpenStudio::Model::matchSurfaces(spaces)
+
+        assert_equal(1, sp1.surfaces.size)
+        assert_equal(4, sp1.surfaces.first.vertices.size)
+
+        space2Surfaces = sp2.surfaces
+        space2Surfaces = space2Surfaces.sort_by {|x| x.vertices.count}
+        assert_equal(2, sp2.surfaces.size)
+        assert_equal(4, space2Surfaces.first.vertices.size)
+        assert_equal(8, space2Surfaces.last.vertices.size)
+    end
+end
-- 
2.28.0.windows.1

